Help on module pythinux:

NAME
    pythinux

CLASSES
    builtins.Exception(builtins.BaseException)
        FileError
        SudoError
    builtins.object
        Base
            User
        LOGOFFEVENT
        rangedInt
    
    class Base(builtins.object)
     |  Base class used by all classes.
     |  This class is used as a base for other classes exclusively,
     |  and is not called directly.
     |  
     |  Methods defined here:
     |  
     |  __iter__(self)
     |      Iterating through a Base object iterates through the keys and not the
     |      values.
     |  
     |  __len__(self)
     |      Runing len() for a Base object returns the amount of attributes it has.
     |  
     |  __str__(self)
     |      Printing an object will return the object passed
     |      through pprint_dict(obj_to_dict()).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class FileError(builtins.Exception)
     |  FileError(text)
     |  
     |  Generic exception for indicating an issue with opening or parsing a file.
     |  Args:
     |  text: what to display to the user.
     |  
     |  Method resolution order:
     |      FileError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, text)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  write(self, text)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class LOGOFFEVENT(builtins.object)
     |  This class(not an instance of it) is returned by main() when
     |  the user uses the "logoff" command.
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SudoError(builtins.Exception)
     |  Generic exception for issues with sudo priveleges.
     |  
     |  Method resolution order:
     |      SudoError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class User(Base)
     |  User(username, password='dd16140fd78ac91c5c108d2902d54d94615d765ef6748016092fec716ebc0b0fb936b340f23c46a346b0e84e108a9d10', lvl=1, hidden=False)
     |  
     |  User class used by Pythinux.
     |  See __init__() for how to create User objects properly.
     |  
     |  Method resolution order:
     |      User
     |      Base
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  USERTYPE(self)
     |      Returns a string of the user's user type based on the stored value.
     |      Level 0 returns "guest", lv1 returns "user", 2 "root", 3 "god",
     |      and other values return "#INVALID".
     |  
     |  __init__(self, username, password='dd16140fd78ac91c5c108d2902d54d94615d765ef6748016092fec716ebc0b0fb936b340f23c46a346b0e84e108a9d10', lvl=1, hidden=False)
     |      Constructor for User class.
     |      Args:
     |          username: string, the username for the user.
     |          password: string passed through hashString() (Note: you MUST
     |          pass it through hashString().
     |              If no password is given, the password is blank.
     |              (the hash obviously still exists. pydoc represents the
     |              output of hashString("") as the default password.
     |          lvl: integer represenging the user's level.
     |              0: guest, has very limited access to programs.
     |              1: user, can access system_low programs.
     |              2: root, can access all programs.
     |              3: god, can access system_high programs. Generally not used.
     |              Other values: invalid user, causes bugs.
     |  
     |  admin(self)
     |      Returns whether or not the user's level is 2 or higher,
     |      indicating a root user.
     |  
     |  check(self, username, password='fd43ec460c5eebaa1c13d74f63f6c39b1150d7529e1ae0464a58e3038fc53e39d0dc8180acc4751e730acda52ccb04f4')
     |      Function for checking whether a User class and passed details match.
     |      Args:
     |          username: string
     |          password: string
     |      Returns:
     |          bool depending on whether or not the supplied details match up
     |          with the User object's properties.
     |  
     |  god(self)
     |      Returns whether or not the user's level is 3 or higher,
     |      indicating a god user.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Base:
     |  
     |  __iter__(self)
     |      Iterating through a Base object iterates through the keys and not the
     |      values.
     |  
     |  __len__(self)
     |      Runing len() for a Base object returns the amount of attributes it has.
     |  
     |  __str__(self)
     |      Printing an object will return the object passed
     |      through pprint_dict(obj_to_dict()).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Base:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class rangedInt(builtins.object)
     |  rangedInt(value, min_value, max_value)
     |  
     |  A floating point number with a specified range
     |  that gets automatically adhered to.
     |  Currently unused, but will be used soon.
     |  
     |  Methods defined here:
     |  
     |  __add__(self, other)
     |  
     |  __init__(self, value, min_value, max_value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __mul__(self, other)
     |  
     |  __radd__(self, other)
     |  
     |  __rmul__(self, other)
     |  
     |  __rsub__(self, other)
     |  
     |  __rtruediv__(self, other)
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  __sub__(self, other)
     |  
     |  __truediv__(self, other)
     |  
     |  get(self)
     |  
     |  set(self, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    CompileOS()
    
    addPythinuxModule(module, shared_objects, user)
        Adds the Pythinux module to a module.
        Internal function only, please ignore.
    
    attachDebugger(globals)
    
    br()
        Displays a "Press ENTER To continue" screen when called.
    
    byte_stream_to_zip(byte_stream, output_path)
        Opposite of zip_to_byte_stream.
        Args:
        byte_stream: The byte stream to be parsed
        output_path: The filename to write the new zip file to.
    
    castObject(obj, new_type)
        Create a new object of a specified type or use an existing object,
        copying all attributes (excluding methods) of the
        original object to the new one.
        
        Args:
            obj: The original object to cast
            cast_type: The type or object to cast the original object to.
            If `cast_type` is a type, a new object of that type is created.
            If `cast_type` is an object, the original object is
            copied to that object.
        
        Returns:
            A new object of the specified type, with all attributes
            (excluding methods) of the original object copied over.
            If `cast_type` is an object, the original object is copied to
            that object and returned.
    
    clearTemp()
        Clears the contents of the tmp/ directory in the
        Pythinux install directory.
    
    cls()
        Clears the terminal screen.
        Works for both Windows and Unix-like systems, so basically everything.
    
    copy(obj)
        See python's copy.deepcopy(). It's the same thing.
    
    createModule(moduleName)
        Creates a module object, which not normally creatable.
    
    createService(command, user)
        Creates a service that can be passed to startService().
        Args:
            command: command to be executed.
            user: user that executes the command.
    
    createUser(userlist, user)
        Adds a User to a userlist.
        Args:
            userlist: a userlist object (loaded from loadUserList())
            user: a User instance.
        Returns:
            userlist: a userlist that can be passed to saveUserList().
    
    div()
        Prints 20 hyphen/dash symbols.
    
    div2()
        Returns 20 hyphen/dash symbols as a string.
    
    doCalc(text)
        A fully safe (but sadly very restricted) version of eval().
        Undergoes HEAVY sanitisation before execution.
    
    doNothing(obj)
        Returns obj.
        Used to prevent linter programs from complaining about "unused" programs.
    
    exposeAllVar(module)
        This function is unused.
        Adds the contents of globals() to a module.
    
    exposeObjects(module, objects)
        Internal function that adds a dictionary containing objects to a module.
        The dictionary is in the format {name:object}.
        Returns the module with the objects exposed.
    
    fixDirectories()
        Reconstructs the blank directories if they do not exist, because git doesn't count directories as files.
    
    giveOutput(command, user, split=False, shell='terminal')
           Returns the output of a command.
           Positional arguments:
               (str) command: the command to execute
               (User) user: the user executing the command. Pass currentUser.
               (bool) split: if true, returns it split into a list with 
        as a
               separator.
               (str) shell: Passed to main().
    
    giveVars()
        Returns the list of variables loaded by the program.
    
    hashString(plaintext, salt=None)
        Hashing algorithm used by Pythinux.
        Args:
            plaintext: a string.
            salt: an optional salt, usually a bytes-like object. If none is
            provided, a random one is generated.
        Returns:
            salted_hash: The final hash. The last 16 characters is the salt,
            required to verify the hash.
        The verifyHash function is used to authenticate hashes.
    
    init(user, x)
        Init function. Runs the  'initd --init' command.
    
    joinIterable(string, iterable)
        Joins a string and an iterable together.
        Args:
        string: The initial string to join to
        iterable: an iterable object to join
        Returns:
        string + every item in iterable
    
    list_loadable_programs(user, sudoMode=False)
        Returns a list of all commands that the user is authorised to load.
        Note: if sudoMode is True, the app and system
        directories are always authorised.
    
    loadAL()
        Returns the autologin username as a string, or None of there isn't one set.
    
    loadAliases()
        Returns the list of aliases, or {} if there isn't one.
    
    loadProgramBase(program_name_with_args, user, sudoMode=False, shell='terminal', __name__=None, isolatedMode=False)
    
    loadUserList()
        Handles loading the userlist from the file system.
        Returns the userlist when called.
    
    load_program(program_name_with_args, user, sudoMode=False, shell='terminal', debugMode=False, baseMode=False, __name__=None, isolatedMode=False)
    
    logEvent(text, log='base_log')
        Creates or appends to a log.
        Arguments:
            (str) text: the text that gets logged.
            (str) log: the name of the log file. Default is "base_log".
    
    loginScreen(username=None, password=None)
        Login screen.
        Args:
            (optional) (str) username: the username passed to the login screen.
            Passing this will launch the Unlock Screen screen.
            (optional) (str) password: the password passed to the login screen.
            Passing both the username and password bypasses the input.
        Once you enter your details, init() is called.
    
    main(user, prompt, sudoMode=False, shell='terminal', doNotExecute=False)
        Main function. Used to execute commands.
        Args:
            (User) user: the User object.
            (str) prompt: the command that gets exexuted.
            (bool) sudoMode: Passed to load_program().
            (str) shell: the name of the terminal that executes the command.
    
    makeDir()
        Don't remember what this one does. Internal function. Ignore.
    
    makeDirDict()
        Returns a dictionary containing
        every single item in dir() in the format {itemname:item}.
        Mostly unused.
    
    maxEscape()
        Internal function.
    
    mergeDict(a, b)
        Merges a with b.
        Args:
            a: dictionary. Main dictionary.
            b: dictionary.
        Returns:
            a with the contents of b appended to it.
    
    obj_to_dict(obj, addItemType=True)
        Recursively convert an object and all its attributes to a dictionary.
    
    parseInput(user, string, shell)
        Function for parsing aliases. Internal only.
    
    pprint(obj)
        Prints an object's attributes as a formatted dictionary.
    
    pprint_dict(dic)
        Takes a dictionary and returns it as a string with indentation
    
    removeUser(userlist, user)
        Removes a user from the userlist.
        Args:
            userlist: a userlist object (loaded from loadUserList())
            user: a User instance.
        Returns:
            userlist: a userlist that can be passed to saveUserList().
    
    run_script(f, user)
        Runs a script.
        Args:
            f: a file-type object to be read. Must be in 'r' mode.
            user: a User object, the actual user to execute the script.
    
    saveAL(username)
        Makes username the autologin username
        Autologin allows for only the password to be entered.
    
    saveAliases(aliases)
        Saves an alias list.
        Args:
            aliases: a list grabbed from loadAliases().
    
    saveUserList(userList)
        Saves a userlist to the file system.
        userlist: a userlist (returned by loadUserlist()).
    
    setVars(var)
        Unused.
    
    setupWizard()
    
    sha256(string, salt=None)
        Performs a SHA256 og a string.
        Arguments:
            (str) string: string to be parsed
            (bytes-like) salt: optional salt, should be output of os.urandom().
    
    silent(function)
        Runs some code without outputting anything to the terminal
        Args:
        function: a callable object.
    
    splitString(string)
        Used by main() for turning a string into a list of arguments.
    
    startService(thread, name)
        Starts a service.
        Args:
        thread: a service generated using createService()
        name: name of the service.
    
    sudo(user, inca=0)
        Password authentication.
        Args:
            user: the user getting authenticated.
        Returns True if the user types their password,
        and False if they fail after 10 tries.
    
    verifyHash(plaintext, saltedHashString)
        Verifies a hash.
        Args:
            plaintext: the string to check against.
            saltedHashString: a hash generated using hashString()
        Returns a boolean depending on whether or not the two match.
    
    zip_to_byte_stream(zip_path)
        Converts a zip file to a byte stream that can be inserted into source code.
        Args:
        zip_path: path to the zip file.
        Returns: a bytes object that can be used by byte_stream_to_zip.
        Warning: Its output can sometimes be corrupt, so don't delete the original
        files, just in case. Guess what I did for Pythinux 2.1?

DATA
    osName = 'Pythinux'
    var = {}
    version = [2, 3, 0]
